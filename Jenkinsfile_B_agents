pipeline 
{
    agent none
    stages{
        stage('Static'){
            agent any
            steps{
                stash name: 'shared_files', includes: '**/*'
                echo 'STATIC STAGE'
                echo 'HOSTNAME:'
                bat 'hostname'
                echo 'WHOAMI:'
                bat 'whoami'
                echo 'WORKSPACE:'
                echo WORKSPACE
                bat '''
                    SET PYTHONPATH=%WORKSPACE%
                    flake8 --exit-zero --format=pylint app >flake8.out
                '''
                recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
            }
        }
        stage('Security'){
            agent any
            steps{
                echo 'SECURITY STAGE'
                echo 'HOSTNAME:'
                bat 'hostname'
                echo 'WHOAMI:'
                bat 'whoami'
                echo 'WORKSPACE:'
                echo WORKSPACE
                bat '''
                    bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: {severity}: {test_id}: {msg}"    
                '''
                recordIssues tools: [pyLint(name: 'Flake8', pattern: 'bandit.out')], qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
            }
        }
        stage('Tests 2'){
            parallel{
                stage('Unit'){
                    agent {label 'agent1'}
                    steps{
                        echo 'UNIT STAGE'
                        echo 'HOSTNAME:'
                        bat 'hostname'
                        echo 'WHOAMI:'
                        bat 'whoami'
                        echo 'WORKSPACE:'
                        echo WORKSPACE
                        catchError(buildResult:'SUCCESS',stageResult:'SUCCESS'){
                            bat '''
                                SET PYTHONPATH=%WORKSPACE%
                                coverage run --source=app --omit=app\\__init__.py,app\\api.py -m pytest --junitxml=result-unit.xml test\\unit                       
                            ''' 
                            stash name: 'results_unit_files', includes: 'result-unit.xml'
                        }
                    }
                } 
                stage('Rest'){
                    agent {label 'agent2'}
                    steps{
                        echo 'REST STAGE'
                        echo 'HOSTNAME:'
                        bat 'hostname'
                        echo 'WHOAMI:'
                        bat 'whoami'
                        echo 'WORKSPACE:'
                        echo WORKSPACE
                        catchError(buildResult:'SUCCESS',stageResult:'SUCCESS'){
                            bat '''
                                SET PYTHONPATH=%WORKSPACE%
                                set FLASK_APP = app\\api.py
                                start flask run
                                start java -jar C:\\Unir\\wiremock-standalone-3.5.3.jar --port 9090 --root-dir test\\wiremock
                                pytest --junitxml=result-rest.xml test\\rest     
                            '''  
                            stash name: 'results_rest_files', includes: 'result-rest.xml'
                            unstash 'results_unit_files' 
                            unstash 'results_rest_files' 
                            junit '**/result-*.xml'
                            junit 'result*.xml' 
                        }
                    }
                }
            }
        }
        stage('Cobertura'){
            agent {label 'agent1'}
            steps{
                echo 'COBERTURA STAGE'
                echo 'HOSTNAME:'
                bat 'hostname'
                echo 'WHOAMI:'
                bat 'whoami'
                echo 'WORKSPACE:'
                echo WORKSPACE
                bat '''
                    coverage xml
                '''
                catchError(buildResult:'UNSTABLE',stageResult:'FAILURE'){
                    cobertura coberturaReportFile: 'coverage.xml', onlyStable: false, failUnstable:false, conditionalCoverageTargets: '90,80,80', lineCoverageTargets:'95,85,85'
                }
            }
        }
        stage('Performance'){
            agent any
            steps{
                echo 'PERFORMANCE STAGE'
                echo 'HOSTNAME:'
                bat 'hostname'
                echo 'WHOAMI:'
                bat 'whoami'
                echo 'WORKSPACE:'
                echo WORKSPACE
                catchError(buildResult:'UNSTABLE',stageResult:'FAILURE'){
                    bat '''
                        C:\\Unir\\apache-jmeter-5.6.3\\bin\\jmeter -n -t test\\jmeter\\flask.jmx -f -l flask.jtl
                    '''
                    perfReport sourceDataFiles: 'flask.jtl'
                }
            }
        }
    }
}